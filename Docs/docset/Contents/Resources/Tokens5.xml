<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PWLogger.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PWLogger</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
            
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/consoleLoggingEnabled:forService:</TokenIdentifier>
			<Abstract type="html">Enables or disables console logging for the service.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)consoleLoggingEnabled:(BOOL)enabled forService:(NSString *)serviceName</Declaration>
			<Parameters>
				<Parameter>
					<Name>enabled</Name>
					<Abstract type="html">Enable or disable to the console logger.</Abstract>
				</Parameter><Parameter>
					<Name>serviceName</Name>
					<Abstract type="html">Service to log</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/consoleLoggingEnabled:forService:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/fileLoggingEnabled:forService:</TokenIdentifier>
			<Abstract type="html">Enables or disables file logging for the service.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)fileLoggingEnabled:(BOOL)enabled forService:(NSString *)serviceName</Declaration>
			<Parameters>
				<Parameter>
					<Name>enabled</Name>
					<Abstract type="html">Enable or disable to the file logger.</Abstract>
				</Parameter><Parameter>
					<Name>serviceName</Name>
					<Abstract type="html">Service to log</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fileLoggingEnabled:forService:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/logForService:message:type:file:function:line:dictionary:</TokenIdentifier>
			<Abstract type="html">Logs a message using all the loggers added to the logging module.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)logForService:(NSString *)serviceName message:(NSString *)message type:(PWLogType)type file:(const char *)file function:(const char *)function line:(NSUInteger)line dictionary:(NSDictionary *)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>serviceName</Name>
					<Abstract type="html">The service name that corresponds to the message. Only loggers with the same service name will receive the message.</Abstract>
				</Parameter><Parameter>
					<Name>message</Name>
					<Abstract type="html">The main message content of the log message.</Abstract>
				</Parameter><Parameter>
					<Name>type</Name>
					<Abstract type="html">The type of the message. Only loggers with a base level equal or below the message type will proceed log the message. See the &apos;PWLogType&apos; and &apos;PWLogLevel&apos; enums.</Abstract>
				</Parameter><Parameter>
					<Name>file</Name>
					<Abstract type="html">The file where the message was logged.</Abstract>
				</Parameter><Parameter>
					<Name>function</Name>
					<Abstract type="html">The function from where the message was logged.</Abstract>
				</Parameter><Parameter>
					<Name>line</Name>
					<Abstract type="html">The line number inside the file where the message was logged.</Abstract>
				</Parameter><Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">A dictionary of values to store in the log.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/logForService:message:type:file:function:line:dictionary:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/addLogger:</TokenIdentifier>
			<Abstract type="html">Adds a logger to the logging module.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)addLogger:(id&lt;PWLogger&gt;)logger</Declaration>
			<Parameters>
				<Parameter>
					<Name>logger</Name>
					<Abstract type="html">The logger to add. It must implement the PWLogger.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addLogger:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/removeLogger:</TokenIdentifier>
			<Abstract type="html">Removes a logger from the logging module</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)removeLogger:(id&lt;PWLogger&gt;)logger</Declaration>
			<Parameters>
				<Parameter>
					<Name>logger</Name>
					<Abstract type="html">The logger to remove.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeLogger:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/setLoggersLogLevel:</TokenIdentifier>
			<Abstract type="html">Sets all the loggers log level.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)setLoggersLogLevel:(PWLogLevel)logLevel</Declaration>
			<Parameters>
				<Parameter>
					<Name>logLevel</Name>
					<Abstract type="html">The log level to log.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLoggersLogLevel:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/setLoggersLogLevel:forService:</TokenIdentifier>
			<Abstract type="html">Sets all the loggers log level for a service.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)setLoggersLogLevel:(PWLogLevel)logLevel forService:(NSString *)serviceName</Declaration>
			<Parameters>
				<Parameter>
					<Name>logLevel</Name>
					<Abstract type="html">The log level to log.</Abstract>
				</Parameter><Parameter>
					<Name>serviceName</Name>
					<Abstract type="html">The service to set the log level on.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLoggersLogLevel:forService:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/setLogInternalError:</TokenIdentifier>
			<Abstract type="html">Enables or disables logging internal errors.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)setLogInternalError:(BOOL)logInternalErrors</Declaration>
			<Parameters>
				<Parameter>
					<Name>logInternalErrors</Name>
					<Abstract type="html">A BOOL value that indicates whether internal errors should be logged.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLogInternalError:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/emailLogs</TokenIdentifier>
			<Abstract type="html">Displays MFMailComposeViewController to email logs.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)emailLogs</Declaration>
			
			
			<Anchor>//api/name/emailLogs</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWLogger/emailLogsForService:</TokenIdentifier>
			<Abstract type="html">Displays MFMailComposeViewController to email logs.</Abstract>
			<DeclaredIn>PWLogger.h</DeclaredIn>
			
			<Declaration>+ (void)emailLogsForService:(NSString *)serviceName</Declaration>
			<Parameters>
				<Parameter>
					<Name>serviceName</Name>
					<Abstract type="html">The service to send the logs for.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/emailLogsForService:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
        
        
	</File>
</Tokens>