<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PWCME.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PWCME</TokenIdentifier>
			<Abstract type="html">PWCME provides a full-featured content management solution that allows you to deliver engaging content to your users.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getAllContainersWithSuccess:failure:</TokenIdentifier>
			<Abstract type="html">Returns a list of the available containers.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getAllContainersWithSuccess:(void ( ^ ) ( NSArray *containers ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getAllContainersWithSuccess:failure: succeeds. This block has no return value and takes one argument: the containers received from the server (an NSArray object that contains PWContainer objects).</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getAllContainersWithSuccess:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getAllContainersWithSuccess:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getContainerWithContainerID:success:failure:</TokenIdentifier>
			<Abstract type="html">Returns a PWContainer object for the specified Container ID.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getContainerWithContainerID:(NSString *)containerID success:(void ( ^ ) ( PWContainer *container ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The requested Container ID.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getContainerWithContainerID:success:failure: succeeds. This block has no return value and takes one argument: the container received from the server.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getContainerWithContainerID:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getContainerWithContainerID:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getSchemasWithLimit:offset:success:failure:</TokenIdentifier>
			<Abstract type="html">Returns a list of the available containers.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getSchemasWithLimit:(NSInteger)limit offset:(NSInteger)offset success:(void ( ^ ) ( NSArray *schemas , PWPagination *pagination , BOOL pagingEnabled ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>limit</Name>
					<Abstract type="html">Specifies the number of results to return. This is useful for pagination. Default value is 10 and maximum value is 100.</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">Specifies the number of results to offset. This is useful for pagination. Default value is 0.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getSchemasWithLimit:limit:offset:success:failure: succeeds. This block has no return value and takes one argument: the schemas received from the server (an NSArray object that contains PWSchema objects).</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getSchemasWithLimit:limit:offset:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getSchemasWithLimit:offset:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getSchemaWithSchemaID:success:failure:</TokenIdentifier>
			<Abstract type="html">Returns a PWSchema object for the specified Schema ID.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getSchemaWithSchemaID:(NSString *)schemaID success:(void ( ^ ) ( PWSchema *schema ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>schemaID</Name>
					<Abstract type="html">The requested Schema ID.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getSchemaWithSchemaID:success:failure: succeeds. This block has no return value and takes one argument: the schema received from the server.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getSchemaWithSchemaID:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getSchemaWithSchemaID:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getStructuresForContainerID:depth:includeSchema:success:failure:</TokenIdentifier>
			<Abstract type="html">This method is used to get a structure. Depending on the request parameters, this may return a multi-level structure or a single-level structure. Traversal will begin at the root level. Otherwise, traversal will begin at the structure item with the specified id.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getStructuresForContainerID:(NSString *)containerID depth:(NSInteger)depth includeSchema:(BOOL)schema success:(void ( ^ ) ( NSArray *structures ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to get the structures for.</Abstract>
				</Parameter><Parameter>
					<Name>depth</Name>
					<Abstract type="html">The depth to traverse into child structures. If the depth is set to 0 then no child structures will be returned, if the depth is set to 1 then the immediate child structures will be returned, and so on. To get the full hierarchy of children use kPWCMEDepthFullHierarchy. Be careful when using this value for large structures.</Abstract>
				</Parameter><Parameter>
					<Name>schema</Name>
					<Abstract type="html">If YES then the schema will be returned for structures that have one.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getStructureForContainerID:depth:includeSchema:success:failure: succeeds. This block has no return value and takes one argument: The structure received from the server.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getStructureForContainerID:depth:includeSchema:success:failure: fails. This block has no return value and takes one argument:, an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getStructuresForContainerID:depth:includeSchema:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getStructureWithID:containerID:depth:includeSchema:success:failure:</TokenIdentifier>
			<Abstract type="html">This method is used to get a structure for a specified structure ID. Depending on the request parameters, this may return a multi-level structure, or a single-level structure. Traversal will begin at the root level. Otherwise, traversal will begin at the structure item with the specified ID.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getStructureWithID:(NSUInteger)structureID containerID:(NSString *)containerID depth:(NSInteger)depth includeSchema:(BOOL)schema success:(void ( ^ ) ( PWStructure *structure ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The ID of the structure.</Abstract>
				</Parameter><Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container.</Abstract>
				</Parameter><Parameter>
					<Name>depth</Name>
					<Abstract type="html">The depth to traverse into child structures. If the depth is set to 0 (default), then no child structures will be returned; if the depth is set to 1, then the immediate child structures will be returned; and so on. To get the full hierarchy of children, use kPWCMEDepthFullHierarchy. Be careful when using this value for large structures.</Abstract>
				</Parameter><Parameter>
					<Name>schema</Name>
					<Abstract type="html">If YES, then the schema will be returned for structures that have one.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getStructureForContainerID:depth:includeSchema:success:failure: succeeds. This block has no return value and takes one argument: the structure received from the server.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getStructureForContainerID:depth:includeSchema:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getStructureWithID:containerID:depth:includeSchema:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getContentForContentID:containerID:structureID:parentID:limit:offset:success:failure:</TokenIdentifier>
			<Abstract type="html">Gets the content based on the structure hierarchy and schemas. The structure of the response data for this method relies completely on the structure of the structures and schemas. Content will be retrieved starting from the root level.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getContentForContentID:(NSString *)contentID containerID:(NSString *)containerID structureID:(NSInteger)structureID parentID:(NSString *)parentID limit:(NSInteger)limit offset:(NSInteger)offset success:(void ( ^ ) ( NSDictionary *contents ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>contentID</Name>
					<Abstract type="html">The Content ID to fetch.</Abstract>
				</Parameter><Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The ID of the structure item to start at. If no Structure ID is specified, then the content will be retrieved starting from the root level. Otherwise, the content will be retrieved starting at the level in the structure hierarchy that the specified structure item resides.</Abstract>
				</Parameter><Parameter>
					<Name>parentID</Name>
					<Abstract type="html">The ID of the parent content item. This is used to filter to appropriate child content for a specific branch in the content hierarchy.</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">Specifies the number of results to return. This is useful for pagination. Default value is 10 and maximum value is 100. NOTE: This parameter is only used when the structure_id references a structure item of type array.</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">Specifies the number of results to offset. This is useful for pagination. Default value is 0. NOTE: This parameter is only used when the structure_id references a structure item of type array.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getContentForContainerID:success:failure: succeeds. This block has no return value and takes one argument: The content received from the server. The structure of the response data for this method relies completely on the structure of the structures and schemas.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getContentForContainerID:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getContentForContentID:containerID:structureID:parentID:limit:offset:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getContentForContentID:containerID:structureID:success:failure:</TokenIdentifier>
			<Abstract type="html">Gets the content for the specified Content ID and Container ID. The structure of the response data for this method relies completely on the structures and schemas.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getContentForContentID:(NSString *)contentID containerID:(NSString *)containerID structureID:(NSInteger)structureID success:(void ( ^ ) ( NSDictionary *content ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>contentID</Name>
					<Abstract type="html">The Content ID to fetch.</Abstract>
				</Parameter><Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The ID of the structure item to start at.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getContentForContentID:containerID:success:failure: succeeds. This block has no return value and takes one argument: the content received from the server. The structure of the response data for this method relies completely on the structure of the structures and schemas.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getContentForContentID:containerID:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getContentForContentID:containerID:structureID:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getAllContentsForContainerID:depth:limit:offset:success:failure:</TokenIdentifier>
			<Abstract type="html">Gets all content based on the menu hierarchy and schemas. The structure of the response data for this method relies completely on the structure and schemas.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getAllContentsForContainerID:(NSString *)containerID depth:(NSInteger)depth limit:(NSInteger)limit offset:(NSInteger)offset success:(void ( ^ ) ( NSArray *contents , PWPagination *pagination , BOOL pagingEnabled ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>depth</Name>
					<Abstract type="html">The depth to traverse into child structures. If the depth is set to 0 then no child structures will be returned, if the depth is set to 1 then the immediate child structures will be returned, and so on. To get the full hierarchy of children use kPWCMEDepthFullHierarchy. Be careful when using this value for large structures.</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">The number of contents to be fetched.</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">The offset from where the contents need be fetched.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getAllContentsForContainerID:limit:offset:success:failure: succeeds. This block has no return value and takes three arguments: the content received from the server, a PWPagination object that details content pagination information and a BOOL value that indicates whether or not paging is enabled. The structure of the content data relies completely on the structure of the structures and schemas.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getAllContentsForContainerID:limit:offset:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getAllContentsForContainerID:depth:limit:offset:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getContentsForContainerID:structureID:limit:offset:success:failure:</TokenIdentifier>
			<Abstract type="html">Gets all content for a specific Container ID and Structure ID. The structure of the content data for this method relies completely on the structure and schemas.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getContentsForContainerID:(NSString *)containerID structureID:(NSInteger)structureID limit:(NSInteger)limit offset:(NSInteger)offset success:(void ( ^ ) ( NSArray *contents , PWPagination *pagination , BOOL pagingEnabled ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The ID of the structure to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">Specifies the number of results to return. This is useful for pagination. Default value is 10 and maximum value is 100.</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">Specifies the number of results to offset. This is useful for pagination. Default value is 0.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getContentsForContainerID:structureID:limit:offset:success:failure: succeeds. This block has no return value and takes three arguments: the content received from the server, a PWPagination object that details content pagination information and a BOOL value that indicates whether or not paging is enabled. The structure of the content data relies completely on the structure of the structures and schemas.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getContentsForContainerID:structureID:limit:offset:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getContentsForContainerID:structureID:limit:offset:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getContentsForContainerID:parentID:structureID:limit:offset:success:failure:</TokenIdentifier>
			<Abstract type="html">Gets all content for a specific Container ID, Parent ID, and Structure ID. The structure of the content data for this method relies completely on the structure and schemas.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getContentsForContainerID:(NSString *)containerID parentID:(NSString *)parentID structureID:(NSInteger)structureID limit:(NSInteger)limit offset:(NSInteger)offset success:(void ( ^ ) ( NSArray *contents , PWPagination *pagination , BOOL pagingEnabled ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>parentID</Name>
					<Abstract type="html">The ID of the parent content to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The ID of the structure to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">Specifies the number of results to return. This is useful for pagination. Default value is 10 and maximum value is 100.</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">Specifies the number of results to offset. This is useful for pagination. Default value is 0.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getContentsForContainerID:structureID:limit:offset:success:failure: succeeds. This block has no return value and takes three arguments: the content received from the server, a PWPagination object that details content pagination information and a BOOL value that indicates whether or not paging is enabled. The structure of the content data relies completely on the structure of the structures and schemas.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getContentsForContainerID:structureID:limit:offset:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getContentsForContainerID:parentID:structureID:limit:offset:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/addContent:containerID:structureID:parentContentID:success:failure:</TokenIdentifier>
			<Abstract type="html">This method is used to save new content. If no parent content exists, you should use addContent:structureID:success:failure:.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)addContent:(NSDictionary *)content containerID:(NSString *)containerID structureID:(NSUInteger)structureID parentContentID:(NSString *)parentContentID success:(void ( ^ ) ( NSString *newContentID ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>content</Name>
					<Abstract type="html">The content to save.</Abstract>
				</Parameter><Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to add the content to.</Abstract>
				</Parameter><Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The ID of the structure the content is associated to.</Abstract>
				</Parameter><Parameter>
					<Name>parentContentID</Name>
					<Abstract type="html">The ID of the parent content item. This is used to link up any dynamic children of this structure item that may have already been created when the associated structure is itself within a dynamic structure item. When this is the case, the only way to know which child content path is associated with this parent content data is to supply the parent to this content item.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when addContent:structureID:parentContentID:success:failure: succeeds. This block has no return value and takes no arguments.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when addContent:structureID:parentContentID:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addContent:containerID:structureID:parentContentID:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/addContent:containerID:structureID:success:failure:</TokenIdentifier>
			<Abstract type="html">This method is used to save new content. If parent content exists, you should use addContent:structureID:parentContentID:success:failure:.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)addContent:(NSDictionary *)content containerID:(NSString *)containerID structureID:(NSUInteger)structureID success:(void ( ^ ) ( NSString *newContentID ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>content</Name>
					<Abstract type="html">The content to save.</Abstract>
				</Parameter><Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to add the content to.</Abstract>
				</Parameter><Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The ID of the structure the content is associated to.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when addContent:structureID:success:failure: succeeds. This block has no return value and takes no arguments.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when addContent:structureID:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addContent:containerID:structureID:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/updateContentForContentID:containerID:structureID:updatedContent:success:failure:</TokenIdentifier>
			<Abstract type="html">This method is used to update existing content.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)updateContentForContentID:(NSString *)contentID containerID:(NSString *)containerID structureID:(NSUInteger)structureID updatedContent:(NSDictionary *)updatedContent success:(void ( ^ ) ( void ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>contentID</Name>
					<Abstract type="html">The specified Content ID.</Abstract>
				</Parameter><Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container where the content resides.</Abstract>
				</Parameter><Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The specified structure ID.</Abstract>
				</Parameter><Parameter>
					<Name>updatedContent</Name>
					<Abstract type="html">The updated content. If a parameter IS NOT specified, it will retain its current value. If a parameter IS specified with an empty value, then the value will be cleared.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when updateContentForContentID:strucureID:updatedContent:success:failure: succeeds. This block has no return value and takes no arguments.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when updateContentForContentID:structureID:updatedContent:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/updateContentForContentID:containerID:structureID:updatedContent:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/updateContentForContentID:containerID:structureID:parentContentID:updatedContent:success:failure:</TokenIdentifier>
			<Abstract type="html">This method is used to update existing content.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)updateContentForContentID:(NSString *)contentID containerID:(NSString *)containerID structureID:(NSUInteger)structureID parentContentID:(NSString *)parentContentID updatedContent:(NSDictionary *)updatedContent success:(void ( ^ ) ( void ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>contentID</Name>
					<Abstract type="html">The specified Content ID.</Abstract>
				</Parameter><Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container where the content resides.</Abstract>
				</Parameter><Parameter>
					<Name>structureID</Name>
					<Abstract type="html">The specified structure ID.</Abstract>
				</Parameter><Parameter>
					<Name>parentContentID</Name>
					<Abstract type="html">The specified parent Content ID.</Abstract>
				</Parameter><Parameter>
					<Name>updatedContent</Name>
					<Abstract type="html">The updated content. If a parameter IS NOT specified, it will retain its current value. If a parameter IS specified with an empty value, then the value will be cleared.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when updateContentForContentID:updatedContent:structureID:parentContentID:success:failure: succeeds. This block has no return value and takes no arguments.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when updateContentForContentID:updatedContent:structureID:parentContentID:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/updateContentForContentID:containerID:structureID:parentContentID:updatedContent:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/deleteContentForContentID:traverse:success:failure:</TokenIdentifier>
			<Abstract type="html">This method is used to delete a specific content item. If the associated structure for the content is a dynamic object structure residing in a parent array structure, then all child content will be deleted as well. However, if the associated structure for the content is a static structure item, only the specified content will be deleted.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)deleteContentForContentID:(NSString *)contentID traverse:(BOOL)traverse success:(void ( ^ ) ( void ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>contentID</Name>
					<Abstract type="html">The specified Content ID.</Abstract>
				</Parameter><Parameter>
					<Name>traverse</Name>
					<Abstract type="html">If &apos;YES&apos;, then child content will be deleted as well. This parameter is only useful when the Content ID is associated to a static structure item. In that case, the content for the static structure item will be deleted, along with any content within that structure item.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when deleteContentForContentID:traverse:success:failure: succeeds. This block has no return value and takes no arguments.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when deleteContentForContentID:traverse:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteContentForContentID:traverse:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/deleteContentChildrenForContentID:success:failure:</TokenIdentifier>
			<Abstract type="html">This method is used to delete all child elements within an array structure item.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)deleteContentChildrenForContentID:(NSString *)contentID success:(void ( ^ ) ( void ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>contentID</Name>
					<Abstract type="html">The specified Content ID.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when deleteContentChildrenForContentID:success:failure: succeeds. This block has no return value and takes no arguments.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when deleteContentChildrenForContentID:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteContentChildrenForContentID:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/setCacheTTL:</TokenIdentifier>
			<Abstract type="html">Set the TTL in seconds for caching CME content.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)setCacheTTL:(NSTimeInterval)timeToLive</Declaration>
			<Parameters>
				<Parameter>
					<Name>timeToLive</Name>
					<Abstract type="html">The specified cache time to live in seconds.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCacheTTL:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/cacheTTL</TokenIdentifier>
			<Abstract type="html">The TTL for CME content in seconds. Defaults to 0.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (NSTimeInterval)cacheTTL</Declaration>
			
			<ReturnValue><Abstract type="html">The cached content TTL.</Abstract></ReturnValue>
			<Anchor>//api/name/cacheTTL</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/trimCacheToDate:</TokenIdentifier>
			<Abstract type="html">Removes all objects from the cache that have not been used since the specified date.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)trimCacheToDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Objects that haven&apos;t been accessed since this date are removed from the cache.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimCacheToDate:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/clearCache</TokenIdentifier>
			<Abstract type="html">Removes all CME data from the cache. This method blocks the calling thread until the cache has been cleared.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)clearCache</Declaration>
			
			
			<Anchor>//api/name/clearCache</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWCME/getAllContentsForContainerID:depth:success:failure:</TokenIdentifier>
			<Abstract type="html">Gets all content based on the menu hierarchy and schemas. The structure of the response data for this method relies completely on the structure and schemas.</Abstract>
			<DeclaredIn>PWCME.h</DeclaredIn>
			
			<Declaration>+ (void)getAllContentsForContainerID:(NSString *)containerID depth:(NSInteger)depth success:(void ( ^ ) ( NSDictionary *contents ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>containerID</Name>
					<Abstract type="html">The ID of the container to get the content for.</Abstract>
				</Parameter><Parameter>
					<Name>depth</Name>
					<Abstract type="html">The depth to traverse into child structures. If the depth is set to 0 then no child structures will be returned, if the depth is set to 1 then the immediate child structures will be returned, and so on. To get the full hierarchy of children use kPWCMEDepthFullHierarchy. Be careful when using this value for large structures.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getAllContentsForContainerID:limit:offset:success:failure: succeeds. This block has no return value and takes three arguments: the content received from the server, a PWPagination object that details content pagination information and a BOOL value that indicates whether or not paging is enabled. The structure of the content data relies completely on the structure of the structures and schemas.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getAllContentsForContainerID:limit:offset:success:failure: fails. This block has no return value and takes one argument: an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getAllContentsForContainerID:depth:success:failure:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
        
	</File>
</Tokens>